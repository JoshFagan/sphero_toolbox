// Generated by gencpp from file sphero_msgs/DriveControlGoal.msg
// DO NOT EDIT!


#ifndef SPHERO_MSGS_MESSAGE_DRIVECONTROLGOAL_H
#define SPHERO_MSGS_MESSAGE_DRIVECONTROLGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sphero_msgs
{
template <class ContainerAllocator>
struct DriveControlGoal_
{
  typedef DriveControlGoal_<ContainerAllocator> Type;

  DriveControlGoal_()
    : command()
    , left_speed(0)
    , right_speed(0)
    , angle(0)
    , heading(0)
    , time(0)  {
    }
  DriveControlGoal_(const ContainerAllocator& _alloc)
    : command(_alloc)
    , left_speed(0)
    , right_speed(0)
    , angle(0)
    , heading(0)
    , time(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  _command_type command;

   typedef int16_t _left_speed_type;
  _left_speed_type left_speed;

   typedef int16_t _right_speed_type;
  _right_speed_type right_speed;

   typedef int16_t _angle_type;
  _angle_type angle;

   typedef int16_t _heading_type;
  _heading_type heading;

   typedef int16_t _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::sphero_msgs::DriveControlGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sphero_msgs::DriveControlGoal_<ContainerAllocator> const> ConstPtr;

}; // struct DriveControlGoal_

typedef ::sphero_msgs::DriveControlGoal_<std::allocator<void> > DriveControlGoal;

typedef boost::shared_ptr< ::sphero_msgs::DriveControlGoal > DriveControlGoalPtr;
typedef boost::shared_ptr< ::sphero_msgs::DriveControlGoal const> DriveControlGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sphero_msgs::DriveControlGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sphero_msgs::DriveControlGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sphero_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sphero_msgs': ['/home/josh/GTA/sphero_toolbox/custom_msgs/matlab_msg_gen_ros1/glnxa64/devel/share/sphero_msgs/msg'], 'actionlib_msgs': ['/home/josh/Applications/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/home/josh/Applications/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sphero_msgs::DriveControlGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sphero_msgs::DriveControlGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sphero_msgs::DriveControlGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sphero_msgs::DriveControlGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sphero_msgs::DriveControlGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sphero_msgs::DriveControlGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sphero_msgs::DriveControlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a8b91189893a57df88df9e03d99621c8";
  }

  static const char* value(const ::sphero_msgs::DriveControlGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa8b91189893a57dfULL;
  static const uint64_t static_value2 = 0x88df9e03d99621c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::sphero_msgs::DriveControlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sphero_msgs/DriveControlGoal";
  }

  static const char* value(const ::sphero_msgs::DriveControlGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sphero_msgs::DriveControlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"## Goal: Send a drive command for the robot to execute\n"
"# Which command should be executed: Stop, DriveRawMotors, TurnAngle\n"
"string command\n"
"\n"
"# Left and right speeds used in DriveRawMotors\n"
"int16 left_speed\n"
"int16 right_speed\n"
"int16 angle     # Angle used in turning commands\n"
"int16 heading   # Heading used in heading dependent commands\n"
"int16 time      # Time used in drive for a time amount commands\n"
;
  }

  static const char* value(const ::sphero_msgs::DriveControlGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sphero_msgs::DriveControlGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.left_speed);
      stream.next(m.right_speed);
      stream.next(m.angle);
      stream.next(m.heading);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DriveControlGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sphero_msgs::DriveControlGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sphero_msgs::DriveControlGoal_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command);
    s << indent << "left_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left_speed);
    s << indent << "right_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.right_speed);
    s << indent << "angle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.angle);
    s << indent << "heading: ";
    Printer<int16_t>::stream(s, indent + "  ", v.heading);
    s << indent << "time: ";
    Printer<int16_t>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPHERO_MSGS_MESSAGE_DRIVECONTROLGOAL_H
