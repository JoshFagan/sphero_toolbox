
classdef DriveControlGoal < ros.Message
    %DriveControlGoal MATLAB implementation of sphero_msgs/DriveControlGoal
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'sphero_msgs/DriveControlGoal' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'a8b91189893a57df88df9e03d99621c8' % The MD5 Checksum of the message definition
        PropertyList = { 'Command' 'LeftSpeed' 'RightSpeed' 'Angle' 'Heading' 'Time' } % List of non-constant message properties
        ROSPropertyList = { 'command' 'left_speed' 'right_speed' 'angle' 'heading' 'time' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Command
        LeftSpeed
        RightSpeed
        Angle
        Heading
        Time
    end
    methods
        function set.Command(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DriveControlGoal', 'Command');
            obj.Command = char(val);
        end
        function set.LeftSpeed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DriveControlGoal', 'LeftSpeed');
            obj.LeftSpeed = int16(val);
        end
        function set.RightSpeed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DriveControlGoal', 'RightSpeed');
            obj.RightSpeed = int16(val);
        end
        function set.Angle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DriveControlGoal', 'Angle');
            obj.Angle = int16(val);
        end
        function set.Heading(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DriveControlGoal', 'Heading');
            obj.Heading = int16(val);
        end
        function set.Time(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DriveControlGoal', 'Time');
            obj.Time = int16(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.sphero_msgs.DriveControlGoal.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.sphero_msgs.DriveControlGoal(strObj);
        end
    end
end
