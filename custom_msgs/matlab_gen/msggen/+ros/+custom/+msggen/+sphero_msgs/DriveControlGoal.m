classdef DriveControlGoal < ros.Message
    %DriveControlGoal MATLAB implementation of sphero_msgs/DriveControlGoal
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2021 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'sphero_msgs/DriveControlGoal' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'a8b91189893a57df88df9e03d99621c8' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Command
        LeftSpeed
        RightSpeed
        Angle
        Heading
        Time
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Angle', 'Command', 'Heading', 'LeftSpeed', 'RightSpeed', 'Time'} % List of non-constant message properties
        ROSPropertyList = {'angle', 'command', 'heading', 'left_speed', 'right_speed', 'time'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = DriveControlGoal(msg)
            %DriveControlGoal Construct the message object DriveControlGoal
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function command = get.Command(obj)
            %get.Command Get the value for property Command
            command = char(obj.JavaMessage.getCommand);
        end
        
        function set.Command(obj, command)
            %set.Command Set the value for property Command
            command = convertStringsToChars(command);
            
            validateattributes(command, {'char', 'string'}, {}, 'DriveControlGoal', 'Command');
            
            obj.JavaMessage.setCommand(command);
        end
        
        function leftspeed = get.LeftSpeed(obj)
            %get.LeftSpeed Get the value for property LeftSpeed
            leftspeed = int16(obj.JavaMessage.getLeftSpeed);
        end
        
        function set.LeftSpeed(obj, leftspeed)
            %set.LeftSpeed Set the value for property LeftSpeed
            validateattributes(leftspeed, {'numeric'}, {'nonempty', 'scalar'}, 'DriveControlGoal', 'LeftSpeed');
            
            obj.JavaMessage.setLeftSpeed(leftspeed);
        end
        
        function rightspeed = get.RightSpeed(obj)
            %get.RightSpeed Get the value for property RightSpeed
            rightspeed = int16(obj.JavaMessage.getRightSpeed);
        end
        
        function set.RightSpeed(obj, rightspeed)
            %set.RightSpeed Set the value for property RightSpeed
            validateattributes(rightspeed, {'numeric'}, {'nonempty', 'scalar'}, 'DriveControlGoal', 'RightSpeed');
            
            obj.JavaMessage.setRightSpeed(rightspeed);
        end
        
        function angle = get.Angle(obj)
            %get.Angle Get the value for property Angle
            angle = int16(obj.JavaMessage.getAngle);
        end
        
        function set.Angle(obj, angle)
            %set.Angle Set the value for property Angle
            validateattributes(angle, {'numeric'}, {'nonempty', 'scalar'}, 'DriveControlGoal', 'Angle');
            
            obj.JavaMessage.setAngle(angle);
        end
        
        function heading = get.Heading(obj)
            %get.Heading Get the value for property Heading
            heading = int16(obj.JavaMessage.getHeading);
        end
        
        function set.Heading(obj, heading)
            %set.Heading Set the value for property Heading
            validateattributes(heading, {'numeric'}, {'nonempty', 'scalar'}, 'DriveControlGoal', 'Heading');
            
            obj.JavaMessage.setHeading(heading);
        end
        
        function time = get.Time(obj)
            %get.Time Get the value for property Time
            time = int16(obj.JavaMessage.getTime);
        end
        
        function set.Time(obj, time)
            %set.Time Set the value for property Time
            validateattributes(time, {'numeric'}, {'nonempty', 'scalar'}, 'DriveControlGoal', 'Time');
            
            obj.JavaMessage.setTime(time);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Command = obj.Command;
            cpObj.LeftSpeed = obj.LeftSpeed;
            cpObj.RightSpeed = obj.RightSpeed;
            cpObj.Angle = obj.Angle;
            cpObj.Heading = obj.Heading;
            cpObj.Time = obj.Time;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Command = strObj.Command;
            obj.LeftSpeed = strObj.LeftSpeed;
            obj.RightSpeed = strObj.RightSpeed;
            obj.Angle = strObj.Angle;
            obj.Heading = strObj.Heading;
            obj.Time = strObj.Time;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Command = obj.Command;
            strObj.LeftSpeed = obj.LeftSpeed;
            strObj.RightSpeed = obj.RightSpeed;
            strObj.Angle = obj.Angle;
            strObj.Heading = obj.Heading;
            strObj.Time = obj.Time;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.sphero_msgs.DriveControlGoal.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.sphero_msgs.DriveControlGoal;
            obj.reload(strObj);
        end
    end
end
